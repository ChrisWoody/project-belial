@page "/"
@using System.Text
@using Belial.Common
@using Newtonsoft.Json
@inject HttpClient httpClient

<h1>Project Belial</h1>

@if (!IsSetup)
{
    <p>Specify the full function url to query for the user's books</p>

    <label>Website Url: </label><input type="text" bind="@WebsiteUrl" />
    <p/>
    <label>User Id: </label><input type="text" bind="@UserId" />
    <p/>
    <button onclick="@Setup">Submit</button>
}
else
{
    <p>You've specified the url: <a href="@WebsiteUrl">@WebsiteUrl</a></p>

    if (BooksForUser?.Books == null)
    {
        <p>Getting books...</p>
    }
    else
    {
        <button onclick="@GetBooksForUser">Refresh</button>
        <p>@BooksForUser.Books.Length books found!</p>

        <div class="album py-5 bg-light">
            <div class="container-fluid">

                <div class="row">

                    @foreach (var book in BooksForUser.Books)
                    {

                        <div class="col-auto">
                            <div class="card mb-4">
                                <img src="@book.FullImageUrl" alt="Book image" width="200" height="300">
                                <div class="card-body">
                                    <p class="card-text">@book.Title<br/>@book.Isbn</p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="btn-group">
                                            @if (book.HasRead)
                                            {
                                                <button onclick=@(() => SetBookHasRead(book, false)) class="btn btn-sm btn-outline-success">Have Read</button>
                                            }
                                            else
                                            {
                                                <button onclick=@(() => SetBookHasRead(book, true)) class="btn btn-sm btn-outline-secondary">Have Not Read</button>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                </div>

            </div>
        </div>
    }
}

@functions
{
    private string WebsiteUrl = "http://127.0.0.1:7071";
    private string UserId = "63cdbddd-ce8c-411d-ba1e-0174fa19c05c";
    private bool IsSetup;
    private BooksForUser BooksForUser;
    private string something;

    private async Task Setup()
    {
        IsSetup = true;

        await GetBooksForUser();
    }

    private async Task GetBooksForUser()
    {
        BooksForUser = await httpClient.GetJsonAsync<BooksForUser>($"{WebsiteUrl}/api/GetBooksForUser/{UserId}");
    }

    private async Task SetBookHasRead(BookWithImage book, bool hasRead)
    {
        book.HasRead = hasRead;

        var message = new UpdateBookHttpMessage
        {
            UserId = GetUserId(),
            Book = book
        };

        var requestContent = new StringContent(JsonConvert.SerializeObject(message), Encoding.UTF8, "application/json");
        var response = await httpClient.PostAsync($"{WebsiteUrl}/api/UpdateBookForUser/", requestContent);
        response.EnsureSuccessStatusCode();
    }

    private Guid GetUserId() => Guid.Parse(UserId);
}
