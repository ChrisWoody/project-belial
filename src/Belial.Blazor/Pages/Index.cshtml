@page "/"
@using System.Text
@using Belial.Common
@using Newtonsoft.Json
@inject HttpClient httpClient

<h1>Project Belial</h1>

@if (!IsSetup)
{
    <p>Specify the full function url to query for the user's books</p>

    <label>Website Url: </label><input type="text" bind="@WebsiteUrl" />
    <p/>
    <label>Spreadsheet Id: </label><input type="text" bind="@SpreadsheetId" />
    <p/>
    <button onclick="@Setup">Submit</button>
}
else
{
    <p>You've specified the url: <a href="@WebsiteUrl">@WebsiteUrl</a></p>

    if (Books == null)
    {
        <p>Error: @ErrorThing</p>
        <p>Getting books...</p>
    }
    else
    {
        <button onclick="@GetBooksForUser">Refresh</button>
        <button onclick="@RefreshAllImages">Refresh all images</button>
        <button onclick="@RefreshUi">Refresh UI</button>
        <table style="border: 1px solid black">
            <tr>
                <th>Series</th>
                <th>Total Count</th>
                <th>Read Count</th>
                <th>Not Read Count</th>
                <th>Physical Total Count</th>
                <th>Physical Read Count</th>
                <th>Physical Not Read Count</th>
                <th>Ebook Total Count</th>
                <th>Ebook Read Count</th>
                <th>Ebook Not Read Count</th>
                <th>Audio Total Count</th>
                <th>Audio Read Count</th>
                <th>Audio Not Read Count</th>
            </tr>
            @foreach (var bookSeriesStats in _bookSeriesStats)
            {
                <tr>
                    <td>@bookSeriesStats.Series</td>
                    <td>@bookSeriesStats.TotalCount</td>
                    <td>@bookSeriesStats.TotalRead</td>
                    <td>@bookSeriesStats.TotalNotRead</td>
                    <td>@bookSeriesStats.TotalPhysicalCount</td>
                    <td>@bookSeriesStats.TotalPhysicalRead</td>
                    <td>@bookSeriesStats.TotalPhysicalNotRead</td>
                    <td>@bookSeriesStats.TotalEbookCount</td>
                    <td>@bookSeriesStats.TotalEbookRead</td>
                    <td>@bookSeriesStats.TotalEbookNotRead</td>
                    <td>@bookSeriesStats.TotalAudioCount</td>
                    <td>@bookSeriesStats.TotalAudioRead</td>
                    <td>@bookSeriesStats.TotalAudioNotRead</td>
                </tr>
            }
        </table>

        <div class="album py-5 bg-light">
            <div class="container-fluid">

                <div class="row">

                    @foreach (var book in Books)
                    {

                        <div class="col-auto">
                            <div class="card mb-4" style="width: 12.6rem;">
                                <img src="@book.FullImageUrl" alt="Book image" width="200">
                                <div class="card-body">
                                    <p class="card-text">@book.Title<br/>@book.Isbn</p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="btn-group">
                                            @if (book.HasRead)
                                            {
                                                <button onclick=@(() => SetBookHasRead(book, false)) class="btn btn-sm btn-success">Have Read</button>
                                            }
                                            else
                                            {
                                                <button onclick=@(() => SetBookHasRead(book, true)) class="btn btn-sm btn-warning">Have Not Read</button>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                </div>

            </div>
        </div>
    }
}

@functions
{
    private string WebsiteUrl = "http://127.0.0.1:7071";
    private string SpreadsheetId;
    private bool IsSetup;
    private Book[] Books;
    private BookSeriesStats[] _bookSeriesStats;
    private string ErrorThing;

    private async Task Setup()
    {
        IsSetup = true;

        await GetBooksForUser();
    }

    private async Task GetBooksForUser()
    {
        try
        {
            Books = await httpClient.GetJsonAsync<Book[]>($"{WebsiteUrl}/api/GetBooks/{SpreadsheetId}");
        }
        catch (Exception e)
        {
            ErrorThing = e.Message;
        }

        _bookSeriesStats = Books.GroupBy(b => b.Series)
        .Select(b => new BookSeriesStats
        {
            Series = b.Key,
            TotalCount = b.Count(),
            TotalRead = b.Count(x => x.HasRead),
            TotalNotRead = b.Count(x => !x.HasRead),
            TotalPhysicalCount = b.Count(x => x.Type != "ebook" && x.Type != "MP3" && x.Type != "Audio CD"),
            TotalPhysicalRead = b.Count(x => x.Type != "ebook" && x.Type != "MP3" && x.Type != "Audio CD" && x.HasRead),
            TotalPhysicalNotRead = b.Count(x => x.Type != "ebook" && x.Type != "MP3" && x.Type != "Audio CD" && !x.HasRead),
            TotalEbookCount = b.Count(x => x.Type == "ebook"),
            TotalEbookRead = b.Count(x => x.Type == "ebook" && x.HasRead),
            TotalEbookNotRead = b.Count(x => x.Type == "ebook" && !x.HasRead),
            TotalAudioCount = b.Count(x => (x.Type == "MP3" || x.Type == "Audio CD")),
            TotalAudioRead = b.Count(x => (x.Type == "MP3" || x.Type == "Audio CD") && x.HasRead),
            TotalAudioNotRead = b.Count(x => (x.Type == "MP3" || x.Type == "Audio CD") && !x.HasRead),
        })
        .Concat(new[]
        {
                new BookSeriesStats
                {
                    Series = "Total",
                    TotalCount = Books.Length,
                    TotalRead = Books.Count(b => b.HasRead),
                    TotalNotRead = Books.Count(b => !b.HasRead),
                    TotalPhysicalCount = Books.Count(x => x.Type != "ebook" && x.Type != "MP3" && x.Type != "Audio CD"),
                    TotalPhysicalRead = Books.Count(x => x.Type != "ebook" && x.Type != "MP3" && x.Type != "Audio CD" && x.HasRead),
                    TotalPhysicalNotRead = Books.Count(x => x.Type != "ebook" && x.Type != "MP3" && x.Type != "Audio CD" && !x.HasRead),
                    TotalEbookCount = Books.Count(x => x.Type == "ebook"),
                    TotalEbookRead = Books.Count(x => x.Type == "ebook" && x.HasRead),
                    TotalEbookNotRead = Books.Count(x => x.Type == "ebook" && !x.HasRead),
                    TotalAudioCount = Books.Count(x => (x.Type == "MP3" || x.Type == "Audio CD")),
                    TotalAudioRead = Books.Count(x => (x.Type == "MP3" || x.Type == "Audio CD") && x.HasRead),
                    TotalAudioNotRead = Books.Count(x => (x.Type == "MP3" || x.Type == "Audio CD") && !x.HasRead),
                }
        })
        .ToArray();
    }

    private async Task SetBookHasRead(Book book, bool hasRead)
    {

    }

    private async Task RefreshAllImages()
    {
        var content = new StringContent(JsonConvert.SerializeObject(Books.Where(c => !string.IsNullOrWhiteSpace(c.OriginalImageUrl)).Select(c => c.OriginalImageUrl)), Encoding.UTF8, "application/json");
        var response = await httpClient.PostAsync($"{WebsiteUrl}/api/RefreshImages", content);
        response.EnsureSuccessStatusCode();
    }

    private async Task RefreshUi()
    {
        base.StateHasChanged();
    }

    private class BookSeriesStats
    {
        public string Series { get; set; }
        public int TotalCount { get; set; }
        public int TotalRead { get; set; }
        public int TotalNotRead { get; set; }
        public int TotalPhysicalCount { get; set; }
        public int TotalPhysicalRead { get; set; }
        public int TotalPhysicalNotRead { get; set; }
        public int TotalEbookCount { get; set; }
        public int TotalEbookRead { get; set; }
        public int TotalEbookNotRead { get; set; }
        public int TotalAudioCount { get; set; }
        public int TotalAudioRead { get; set; }
        public int TotalAudioNotRead { get; set; }
    }
}
