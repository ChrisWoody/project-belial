@page "/"
@using System.Text
@using Belial.Common
@using Newtonsoft.Json
@inject HttpClient HttpClient

<h1>Project Belial</h1>

@if (!string.IsNullOrWhiteSpace(_errorMessage))
{
    <p>Error: @_errorMessage</p>
}

@if (!_isSetup)
{
    <p>Specify the full function url to query for the user's books</p>

    <label>Required website details: </label><input type="text" bind="@_websiteDetails" width="400" />
    <p/>
    <button onclick="@Setup">Submit</button>
}
else
{
    <p>You've specified the details: <a href="@_websiteDetails">@_websiteDetails</a></p>

    if (_books == null)
    {
        <p>Getting books...</p>
    }
    else
    {
        <button onclick="@GetBooksForUser">Refresh</button>
        <button onclick="@RefreshAllImages">Refresh all images</button>
        <button onclick="@RefreshMissingImages">Refresh missing images</button>
        <button onclick="@RefreshUi">Refresh UI</button>
        <table style="border: 1px solid black">
            <tr>
                <th>Series</th>
                <th>Total Count</th>
                <th>Read Count</th>
                <th>Not Read Count</th>
                <th>Physical Total Count</th>
                <th>Physical Read Count</th>
                <th>Physical Not Read Count</th>
                <th>Ebook Total Count</th>
                <th>Ebook Read Count</th>
                <th>Ebook Not Read Count</th>
                <th>Audio Total Count</th>
                <th>Audio Read Count</th>
                <th>Audio Not Read Count</th>
            </tr>
            @foreach (var bookSeriesStats in _bookSeriesStats)
            {
                <tr>
                    <td>@bookSeriesStats.Series</td>
                    <td>@bookSeriesStats.TotalCount</td>
                    <td>@bookSeriesStats.TotalRead</td>
                    <td>@bookSeriesStats.TotalNotRead</td>
                    <td>@bookSeriesStats.TotalPhysicalCount</td>
                    <td>@bookSeriesStats.TotalPhysicalRead</td>
                    <td>@bookSeriesStats.TotalPhysicalNotRead</td>
                    <td>@bookSeriesStats.TotalEbookCount</td>
                    <td>@bookSeriesStats.TotalEbookRead</td>
                    <td>@bookSeriesStats.TotalEbookNotRead</td>
                    <td>@bookSeriesStats.TotalAudioCount</td>
                    <td>@bookSeriesStats.TotalAudioRead</td>
                    <td>@bookSeriesStats.TotalAudioNotRead</td>
                </tr>
            }
        </table>

        <div class="album py-5 bg-light">
            <div class="container-fluid">

                <div class="row">

                    @foreach (var book in _books)
                    {
                        <div class="col-auto">
                            <div class="card mb-4" style="width: 12.6rem;">
                                <img src="@book.FullImageUrl" alt="Book image" width="200">
                                <div class="card-body">
                                    <p class="card-text">@book.Title<br/>@book.Isbn</p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="btn-group">
                                            @if (book.HasRead)
                                            {
                                                <button onclick=@(() => SetBookHasRead(book, false)) class="btn btn-sm btn-success">Have Read</button>
                                            }
                                            else
                                            {
                                                <button onclick=@(() => SetBookHasRead(book, true)) class="btn btn-sm btn-warning">Have Not Read</button>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                </div>

            </div>
        </div>
    }
}

@functions
{
    private string _functionAppUrl;
    private string _functionAppKey;
    private string _spreadsheetId;
    private string _websiteDetails;
    private bool _isSetup;
    private Book[] _books;
    private BookSeriesStats[] _bookSeriesStats;
    private string _errorMessage;

    private async Task Setup()
    {
        var split = _websiteDetails.Split('|');
        if (split.Length < 2 || split.Length > 3)
        {
            _errorMessage = "Invalid website details specified";
            return;
        }

        _functionAppUrl = split[0];
        _spreadsheetId = split[1];
        _functionAppKey = split.Length == 3 ? $"?code={split[2]}" : "";

        _isSetup = true;

        await GetBooksForUser();
    }

    private async Task GetBooksForUser()
    {
        try
        {
            _books = await HttpClient.GetJsonAsync<Book[]>($"{_functionAppUrl}/api/GetBooks/{_spreadsheetId}{_functionAppKey}");
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }

        _bookSeriesStats = _books.GroupBy(b => b.Series)
        .Select(b => new BookSeriesStats
        {
            Series = b.Key,
            TotalCount = b.Count(),
            TotalRead = b.Count(x => x.HasRead),
            TotalNotRead = b.Count(x => !x.HasRead),
            TotalPhysicalCount = b.Count(x => x.Type != "ebook" && x.Type != "MP3" && x.Type != "Audio CD"),
            TotalPhysicalRead = b.Count(x => x.Type != "ebook" && x.Type != "MP3" && x.Type != "Audio CD" && x.HasRead),
            TotalPhysicalNotRead = b.Count(x => x.Type != "ebook" && x.Type != "MP3" && x.Type != "Audio CD" && !x.HasRead),
            TotalEbookCount = b.Count(x => x.Type == "ebook"),
            TotalEbookRead = b.Count(x => x.Type == "ebook" && x.HasRead),
            TotalEbookNotRead = b.Count(x => x.Type == "ebook" && !x.HasRead),
            TotalAudioCount = b.Count(x => (x.Type == "MP3" || x.Type == "Audio CD")),
            TotalAudioRead = b.Count(x => (x.Type == "MP3" || x.Type == "Audio CD") && x.HasRead),
            TotalAudioNotRead = b.Count(x => (x.Type == "MP3" || x.Type == "Audio CD") && !x.HasRead),
        })
        .Concat(new[]
        {
                new BookSeriesStats
                {
                    Series = "Total",
                    TotalCount = _books.Length,
                    TotalRead = _books.Count(b => b.HasRead),
                    TotalNotRead = _books.Count(b => !b.HasRead),
                    TotalPhysicalCount = _books.Count(x => x.Type != "ebook" && x.Type != "MP3" && x.Type != "Audio CD"),
                    TotalPhysicalRead = _books.Count(x => x.Type != "ebook" && x.Type != "MP3" && x.Type != "Audio CD" && x.HasRead),
                    TotalPhysicalNotRead = _books.Count(x => x.Type != "ebook" && x.Type != "MP3" && x.Type != "Audio CD" && !x.HasRead),
                    TotalEbookCount = _books.Count(x => x.Type == "ebook"),
                    TotalEbookRead = _books.Count(x => x.Type == "ebook" && x.HasRead),
                    TotalEbookNotRead = _books.Count(x => x.Type == "ebook" && !x.HasRead),
                    TotalAudioCount = _books.Count(x => (x.Type == "MP3" || x.Type == "Audio CD")),
                    TotalAudioRead = _books.Count(x => (x.Type == "MP3" || x.Type == "Audio CD") && x.HasRead),
                    TotalAudioNotRead = _books.Count(x => (x.Type == "MP3" || x.Type == "Audio CD") && !x.HasRead),
                }
        })
        .ToArray();
    }

    private async Task SetBookHasRead(Book book, bool hasRead)
    {
    }

    private async Task RefreshAllImages()
    {
        var message = new RefreshImagesHttpMessage
        {
            DontDownloadIfExists = false,
            ImageUrlsToDownload = _books.Where(c => !string.IsNullOrWhiteSpace(c.OriginalImageUrl)).Select(c => c.OriginalImageUrl).ToArray()
        };
        var content = new StringContent(JsonConvert.SerializeObject(message), Encoding.UTF8, "application/json");
        var response = await HttpClient.PostAsync($"{_functionAppUrl}/api/RefreshImages{_functionAppKey}", content);
        response.EnsureSuccessStatusCode();
    }

    private async Task RefreshMissingImages()
    {
        var message = new RefreshImagesHttpMessage
        {
            DontDownloadIfExists = true,
            ImageUrlsToDownload = _books.Where(c => !string.IsNullOrWhiteSpace(c.OriginalImageUrl)).Select(c => c.OriginalImageUrl).ToArray()
        };
        var content = new StringContent(JsonConvert.SerializeObject(message), Encoding.UTF8, "application/json");
        var response = await HttpClient.PostAsync($"{_functionAppUrl}/api/RefreshImages{_functionAppKey}", content);
        response.EnsureSuccessStatusCode();
    }

    private async Task RefreshUi()
    {
        base.StateHasChanged();
    }

    private class BookSeriesStats
    {
        public string Series { get; set; }
        public int TotalCount { get; set; }
        public int TotalRead { get; set; }
        public int TotalNotRead { get; set; }
        public int TotalPhysicalCount { get; set; }
        public int TotalPhysicalRead { get; set; }
        public int TotalPhysicalNotRead { get; set; }
        public int TotalEbookCount { get; set; }
        public int TotalEbookRead { get; set; }
        public int TotalEbookNotRead { get; set; }
        public int TotalAudioCount { get; set; }
        public int TotalAudioRead { get; set; }
        public int TotalAudioNotRead { get; set; }
    }
}