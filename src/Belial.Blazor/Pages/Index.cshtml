@page "/"
@using System.Text
@using Belial.Common
@using Microsoft.AspNetCore.Blazor.Services
@using Microsoft.AspNetCore.WebUtilities
@using Newtonsoft.Json
@inject IUriHelper UriHelper
@inject HttpClient HttpClient

<h1>Project Belial</h1>

@if (!string.IsNullOrWhiteSpace(_errorMessage))
{
    <p>Error: @_errorMessage</p>
}

@if (!_isSetup)
{
    <p>Specify the required details in the URL.</p>
}
else
{
    if (_filteredBooks == null)
    {
        <p>Getting books...</p>
    }
    else
    {
        <button class="btn btn-sm btn-info" onclick="@GetBooksForUser">Refresh</button>
        <button class="btn btn-sm btn-info" onclick="@DownloadAllImages">Download all images</button>
        <button class="btn btn-sm btn-info" onclick="@DownloadMissingImages">Download missing images</button>
        <button class="btn btn-sm btn-info" onclick="@RefreshUi">Refresh UI</button>
        <p/>
        <b style="margin-left: 0.1em">Filter:</b>
        <select bind="@SeriesFilter">
            @foreach (var series in _series)
            {
                <option value="@series">@series</option>
            }
        </select>
        <select bind="@HasReadFilterProp">
            <option value="@HasReadFilter.All">All</option>
            <option value="@HasReadFilter.HasRead">Has Read</option>
            <option value="@HasReadFilter.HasNotRead">Has Not Read</option>
        </select>
        <br />
        <p/>
        <p>
            <span class="h5">Total: </span><span class="h3" style="margin-right:.5em">@_totalCount</span><span class="h5">Read: </span><span class="h3" style="margin-right:.5em">@_totalReadCount</span><span class="h5">Not Read: </span><span class="h3">@_totalNotReadCount</span>
        </p>

        <div class="album py-5 bg-light">
            <div class="container-fluid">

                <div class="row">

                    @foreach (var book in _filteredBooks)
                    {
                        <div class="col-auto">
                            <div class="card mb-4" style="width: 12.6rem;">
                                <img src="@book.FullImageUrl" alt="Book image" width="200">
                                <div class="card-body">
                                    <p class="card-text">@book.Title<br />@book.Isbn</p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="btn-group">
                                            @if (book.HasRead)
                                            {<button class="btn btn-sm btn-success">Have Read</button> }
                                            else
                                            { <button class="btn btn-sm btn-warning">Have Not Read</button>}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                </div>

            </div>
        </div>

        <table style="border: 1px solid black">
            <tr>
                <th>Series</th>
                <th>Total Count</th>
                <th>Read Count</th>
                <th>Not Read Count</th>
                <th>Physical Total Count</th>
                <th>Physical Read Count</th>
                <th>Physical Not Read Count</th>
                <th>Ebook Total Count</th>
                <th>Ebook Read Count</th>
                <th>Ebook Not Read Count</th>
                <th>Audio Total Count</th>
                <th>Audio Read Count</th>
                <th>Audio Not Read Count</th>
            </tr>
            @foreach (var bookSeriesStats in _bookSeriesStats)
            {
                <tr>
                    <td>@bookSeriesStats.Series</td>
                    <td>@bookSeriesStats.TotalCount</td>
                    <td>@bookSeriesStats.TotalRead</td>
                    <td>@bookSeriesStats.TotalNotRead</td>
                    <td>@bookSeriesStats.TotalPhysicalCount</td>
                    <td>@bookSeriesStats.TotalPhysicalRead</td>
                    <td>@bookSeriesStats.TotalPhysicalNotRead</td>
                    <td>@bookSeriesStats.TotalEbookCount</td>
                    <td>@bookSeriesStats.TotalEbookRead</td>
                    <td>@bookSeriesStats.TotalEbookNotRead</td>
                    <td>@bookSeriesStats.TotalAudioCount</td>
                    <td>@bookSeriesStats.TotalAudioRead</td>
                    <td>@bookSeriesStats.TotalAudioNotRead</td>
                </tr>
            }
        </table>
    }
}

@functions
{
    private string _functionAppUrl;
    private string _functionAppKey;
    private string _spreadsheetId;
    private bool _isSetup;
    private Book[] _allBooks;
    private Book[] _filteredBooks;
    private BookSeriesStats[] _bookSeriesStats;
    private string _errorMessage;

    private string[] _series;
    private string _seriesFilter = "All";

    private string SeriesFilter
    {
        get { return _seriesFilter; }
        set
        {
            _seriesFilter = value;
            RefreshUi().Wait();
        }
    }

    private HasReadFilter _hasReadFilter = HasReadFilter.All;

    private HasReadFilter HasReadFilterProp
    {
        get { return _hasReadFilter; }
        set
        {
            _hasReadFilter = value;
            RefreshUi().Wait();
        }
    }

    private int _totalCount;
    private int _totalReadCount;
    private int _totalNotReadCount;

    protected override void OnInit()
    {
        var uri = new Uri(UriHelper.GetAbsoluteUri());
        QueryHelpers.ParseQuery(uri.Query).TryGetValue("functionAppUrl", out var functionAppUrl);
        QueryHelpers.ParseQuery(uri.Query).TryGetValue("functionAppKey", out var functionAppKey);
        QueryHelpers.ParseQuery(uri.Query).TryGetValue("spreadsheetId", out var spreadsheetId);

        if (!string.IsNullOrWhiteSpace(functionAppUrl) && !string.IsNullOrWhiteSpace(spreadsheetId))
        {
            _functionAppUrl = functionAppUrl.Single();
            _functionAppKey = functionAppKey.SingleOrDefault();
            _spreadsheetId = spreadsheetId.Single();

            _isSetup = true;
            StateHasChanged();

            Task.Run(GetBooksForUser);
        }
    }

    private async Task GetBooksForUser()
    {
        try
        {
            _allBooks = await HttpClient.GetJsonAsync<Book[]>($"{_functionAppUrl}/api/GetBooks/{_spreadsheetId}{_functionAppKey}");
            _series = (new[] { "All" }).Concat(_allBooks.Select(b => b.Series).Distinct().OrderBy(b => b)).ToArray();

            FilterBooks();
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
    }

    private async Task DownloadAllImages()
    {
        var message = new RefreshImagesHttpMessage
        {
            DontDownloadIfExists = false,
            ImageUrlsToDownload = _filteredBooks.Where(c => !string.IsNullOrWhiteSpace(c.OriginalImageUrl)).Select(c => c.OriginalImageUrl).ToArray()
        };
        var content = new StringContent(JsonConvert.SerializeObject(message), Encoding.UTF8, "application/json");
        var response = await HttpClient.PostAsync($"{_functionAppUrl}/api/RefreshImages{_functionAppKey}", content);
        response.EnsureSuccessStatusCode();
    }

    private async Task DownloadMissingImages()
    {
        var message = new RefreshImagesHttpMessage
        {
            DontDownloadIfExists = true,
            ImageUrlsToDownload = _filteredBooks.Where(c => !string.IsNullOrWhiteSpace(c.OriginalImageUrl)).Select(c => c.OriginalImageUrl).ToArray()
        };
        var content = new StringContent(JsonConvert.SerializeObject(message), Encoding.UTF8, "application/json");
        var response = await HttpClient.PostAsync($"{_functionAppUrl}/api/RefreshImages{_functionAppKey}", content);
        response.EnsureSuccessStatusCode();
    }

    private async Task RefreshUi()
    {
        FilterBooks();
    }

    private void FilterBooks()
    {
        _filteredBooks = _allBooks
            .Where(b => _seriesFilter == "All" || b.Series == _seriesFilter)
            .Where(b => _hasReadFilter == HasReadFilter.All || (_hasReadFilter == HasReadFilter.HasRead && b.HasRead) ||
                        (_hasReadFilter == HasReadFilter.HasNotRead && !b.HasRead))
            .ToArray();
        UpdateStats();
        StateHasChanged();
    }

    private void UpdateStats()
    {
        _totalCount = _filteredBooks.Length;
        _totalReadCount = _filteredBooks.Count(b => b.HasRead);
        _totalNotReadCount = _filteredBooks.Count(b => !b.HasRead);

        _bookSeriesStats = _filteredBooks.GroupBy(b => b.Series)
            .Select(b => new BookSeriesStats
            {
                Series = b.Key,
                TotalCount = b.Count(),
                TotalRead = b.Count(x => x.HasRead),
                TotalNotRead = b.Count(x => !x.HasRead),
                TotalPhysicalCount = b.Count(x => x.Type != "ebook" && x.Type != "MP3" && x.Type != "Audio CD"),
                TotalPhysicalRead = b.Count(x => x.Type != "ebook" && x.Type != "MP3" && x.Type != "Audio CD" && x.HasRead),
                TotalPhysicalNotRead = b.Count(x => x.Type != "ebook" && x.Type != "MP3" && x.Type != "Audio CD" && !x.HasRead),
                TotalEbookCount = b.Count(x => x.Type == "ebook"),
                TotalEbookRead = b.Count(x => x.Type == "ebook" && x.HasRead),
                TotalEbookNotRead = b.Count(x => x.Type == "ebook" && !x.HasRead),
                TotalAudioCount = b.Count(x => (x.Type == "MP3" || x.Type == "Audio CD")),
                TotalAudioRead = b.Count(x => (x.Type == "MP3" || x.Type == "Audio CD") && x.HasRead),
                TotalAudioNotRead = b.Count(x => (x.Type == "MP3" || x.Type == "Audio CD") && !x.HasRead),
            })
            .Concat(new[]
            {
                new BookSeriesStats
                {
                    Series = "Total",
                    TotalCount = _filteredBooks.Length,
                    TotalRead = _filteredBooks.Count(b => b.HasRead),
                    TotalNotRead = _filteredBooks.Count(b => !b.HasRead),
                    TotalPhysicalCount = _filteredBooks.Count(x => x.Type != "ebook" && x.Type != "MP3" && x.Type != "Audio CD"),
                    TotalPhysicalRead = _filteredBooks.Count(x => x.Type != "ebook" && x.Type != "MP3" && x.Type != "Audio CD" && x.HasRead),
                    TotalPhysicalNotRead = _filteredBooks.Count(x => x.Type != "ebook" && x.Type != "MP3" && x.Type != "Audio CD" && !x.HasRead),
                    TotalEbookCount = _filteredBooks.Count(x => x.Type == "ebook"),
                    TotalEbookRead = _filteredBooks.Count(x => x.Type == "ebook" && x.HasRead),
                    TotalEbookNotRead = _filteredBooks.Count(x => x.Type == "ebook" && !x.HasRead),
                    TotalAudioCount = _filteredBooks.Count(x => (x.Type == "MP3" || x.Type == "Audio CD")),
                    TotalAudioRead = _filteredBooks.Count(x => (x.Type == "MP3" || x.Type == "Audio CD") && x.HasRead),
                    TotalAudioNotRead = _filteredBooks.Count(x => (x.Type == "MP3" || x.Type == "Audio CD") && !x.HasRead),
                }
            })
            .ToArray();
    }

    private class BookSeriesStats
    {
        public string Series { get; set; }
        public int TotalCount { get; set; }
        public int TotalRead { get; set; }
        public int TotalNotRead { get; set; }
        public int TotalPhysicalCount { get; set; }
        public int TotalPhysicalRead { get; set; }
        public int TotalPhysicalNotRead { get; set; }
        public int TotalEbookCount { get; set; }
        public int TotalEbookRead { get; set; }
        public int TotalEbookNotRead { get; set; }
        public int TotalAudioCount { get; set; }
        public int TotalAudioRead { get; set; }
        public int TotalAudioNotRead { get; set; }
    }

    private enum HasReadFilter
    {
        All,
        HasRead,
        HasNotRead,
    }
}